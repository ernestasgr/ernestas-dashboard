services:
  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - gateway
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_GATEWAY_DOMAIN: ${GATEWAY_DOMAIN}
        NEXT_PUBLIC_FRONTEND_URL: ${FRONTEND_DOMAIN}
    container_name: frontend-prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_GATEWAY_DOMAIN=${GATEWAY_DOMAIN}
      - NEXT_PUBLIC_WEATHER_API_KEY=${WEATHER_API_KEY}
    depends_on:
      - gateway
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile.prod
    container_name: gateway-prod
    environment:
      - NODE_ENV=production
      - AUTH_URL=${AUTH_URL}
      - AUTH_REDIRECT_URL=${AUTH_REDIRECT_URL}
      - GATEWAY_SECRET=${GATEWAY_SECRET}
      - FRONTEND_DOMAIN=${FRONTEND_DOMAIN}
      - JWT_SECRET=${JWT_SECRET}
      - DOMAIN=${DOMAIN}
    depends_on:
      auth:
        condition: service_started
      widget-registry:
        condition: service_started
      notes:
        condition: service_started
      tasks:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  auth:
    build:
      context: ./backend/auth
      dockerfile: Dockerfile.prod
    container_name: auth-prod
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_EXPIRATION: ${JWT_ACCESS_EXPIRATION}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION}
      GATEWAY_SECRET: ${GATEWAY_SECRET}
      FRONTEND_DOMAIN: ${FRONTEND_DOMAIN}
      SPRING_PROFILES_ACTIVE: prod
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_REDIRECT_URI: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_REDIRECT_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_SCOPE: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_SCOPE}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_ID: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_ID}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_SECRET: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_SECRET}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_REDIRECT_URI: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_REDIRECT_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_SCOPE: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_SCOPE}
      SENTRY_DSN: ${SENTRY_DSN_AUTH}
      SENTRY_SEND_DEFAULT_PII: ${SENTRY_SEND_DEFAULT_PII}
      SERVER_FORWARD_HEADERS_STRATEGY: framework
      DOMAIN: ${DOMAIN}
    depends_on:
      auth-db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  auth-db:
    image: postgres:16-alpine
    container_name: auth-db-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_AUTH}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    networks:
      - app-network
    volumes:
      - auth_db_data_prod:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_AUTH}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  widget-registry:
    build:
      context: ./backend/widget-registry
      dockerfile: Dockerfile.prod
    container_name: widget-registry-prod
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@widget-registry-db:5432/${POSTGRES_DB_WIDGET_REGISTRY}?schema=public
      - GATEWAY_SECRET=${GATEWAY_SECRET}
      - KAFKA_BROKERS=event-bus:9092
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    depends_on:
      widget-registry-db:
        condition: service_healthy
      event-bus:
        condition: service_healthy
      kafka-topic-setup:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped

  widget-registry-db:
    image: postgres:16-alpine
    container_name: widget-registry-db-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_WIDGET_REGISTRY}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    networks:
      - app-network
    volumes:
      - widget_registry_db_data_prod:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_WIDGET_REGISTRY}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  notes:
    build:
      context: ./backend/notes
      dockerfile: Dockerfile.prod
    container_name: notes-prod
    environment:
      - NODE_ENV=production
      - PORT=8000
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@notes-db:5432/${POSTGRES_DB_NOTES}
      - SENTRY_DSN_NOTES=${SENTRY_DSN_NOTES}
      - SENTRY_SEND_DEFAULT_PII=${SENTRY_SEND_DEFAULT_PII}
      - KAFKA_BROKERS=event-bus:9092
    depends_on:
      notes-db:
        condition: service_healthy
      event-bus:
        condition: service_healthy
      kafka-topic-setup:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped

  notes-db:
    image: postgres:16-alpine
    container_name: notes-db-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NOTES}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    networks:
      - app-network
    volumes:
      - notes_db_data_prod:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_NOTES}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  tasks:
    build:
      context: ./backend/tasks
      dockerfile: Dockerfile.prod
    container_name: tasks-prod
    environment:
      - PORT=8001
      - ConnectionStrings__DefaultConnection=Host=tasks-db;Database=${POSTGRES_DB_TASKS};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Production
      - GATEWAY_SECRET=${GATEWAY_SECRET}
      - KAFKA_BROKERS=event-bus:9092
    depends_on:
      tasks-db:
        condition: service_healthy
      event-bus:
        condition: service_healthy
      kafka-topic-setup:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped

  tasks-db:
    image: postgres:16-alpine
    container_name: tasks-db-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_TASKS}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    networks:
      - app-network
    volumes:
      - tasks_db_data_prod:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB_TASKS}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  event-bus:
    image: bitnami/kafka:latest
    container_name: event-bus-prod
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@event-bus:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://event-bus:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LOG_RETENTION_HOURS=168
      - KAFKA_CFG_LOG_RETENTION_BYTES=1073741824
      - KAFKA_CFG_LOG_SEGMENT_BYTES=104857600
    networks:
      - app-network
    volumes:
      - kafka_data_prod:/bitnami/kafka
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka-topic-setup:
    image: bitnami/kafka:latest
    container_name: kafka-topic-setup-prod
    depends_on:
      event-bus:
        condition: service_healthy
    command: >
      bash -c "
        kafka-topics.sh --bootstrap-server event-bus:9092 --create --if-not-exists --topic widget-deleted --partitions 3 --replication-factor 1 --config retention.ms=604800000
        echo 'Topics created successfully'
      "
    networks:
      - app-network
    restart: "no"

  # Monitoring and logging (optional for production)
  elasticsearch:
    profiles: ["monitoring"]
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.6
    container_name: elasticsearch-prod
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - logger.org.elasticsearch=error
    networks:
      - app-network
    volumes:
      - es_data_prod:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s"]
      interval: 30s
      retries: 3
      start_period: 60s
      timeout: 30s

  logstash:
    profiles: ["monitoring"]
    image: docker.elastic.co/logstash/logstash:8.16.6
    container_name: logstash-prod
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
      - LOG_LEVEL=error
    volumes:
      - ./logstash/config:/usr/share/logstash/config:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/_node/stats"]
      interval: 30s
      retries: 3
      start_period: 60s
      timeout: 30s

  kibana:
    profiles: ["monitoring"]
    image: docker.elastic.co/kibana/kibana:8.16.6
    container_name: kibana-prod
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - LOGGING_ROOT_LEVEL=error
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      retries: 3
      start_period: 60s
      timeout: 30s

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  auth_db_data_prod:
    driver: local
  widget_registry_db_data_prod:
    driver: local
  notes_db_data_prod:
    driver: local
  tasks_db_data_prod:
    driver: local
  kafka_data_prod:
    driver: local
  es_data_prod:
    driver: local
