services:
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "3000:3000"
    restart: always
    environment:
      - NODE_ENV=${NODE_ENV}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING}
      - NEXT_PUBLIC_GATEWAY_DOMAIN=${GATEWAY_DOMAIN}
    depends_on:
      - auth
    networks:
      - elk
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./frontend/package.json

  auth:
    build:
      context: ./backend/auth
      dockerfile: Dockerfile
    container_name: auth
    ports:
      - "8080:8080"
      - "5841:5841" # TODO: remove this port in production. create docker profiles
    networks:
      - elk
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_EXPIRATION: ${JWT_ACCESS_EXPIRATION}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION}
      GATEWAY_SECRET: ${GATEWAY_SECRET}
      FRONTEND_DOMAIN: ${FRONTEND_DOMAIN}
      SPRING_PROFILES_ACTIVE: ${PROFILE}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_REDIRECT_URI: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_REDIRECT_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_SCOPE: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_SCOPE}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_ID: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_ID}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_SECRET: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_SECRET}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_REDIRECT_URI: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_REDIRECT_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_SCOPE: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_SCOPE}
      JAVA_OPTS: ${JAVA_OPTS}
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_SEND_DEFAULT_PII: ${SENTRY_SEND_DEFAULT_PII}
    depends_on:
      auth-db:
        condition: service_started

  auth-db:
    image: postgres:latest
    container_name: auth-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_AUTH}
    networks:
      - elk
    ports:
      - "5432:5432"
    volumes:
      - auth_db_data:/var/lib/postgresql/data

  elasticsearch:
    profiles: ["elk"]
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.6
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # temporary for development
      - logger.org.elasticsearch=error
    ports:
      - "9200:9200"
    networks:
      - elk
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=50s"]
      interval: 30s
      retries: 3
      start_period: 20s
      timeout: 20s

  logstash:
    profiles: ["elk"]
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:8.16.6
    environment:
      - LOGSTASH_HTTP_HOST=${LOGSTASH_HTTP_HOST}
      - LOG_LEVEL=error
    ports:
      - "5044:5044"
    networks:
      - elk
    volumes:
      - ./logstash/config:/usr/share/logstash/config
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/_node/stats"]
      interval: 30s
      retries: 3
      start_period: 20s
      timeout: 20s

  kibana:
    profiles: ["elk"]
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.16.6
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      - LOGGING_ROOT_LEVEL=error
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601"]
      interval: 30s
      retries: 3
      start_period: 20s
      timeout: 20s
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway
    ports:
      - "4000:4000"
      - "9229:9229"
    networks:
      - elk    
    environment:
      - AUTH_URL=${AUTH_URL}
      - AUTH_REDIRECT_URL=${AUTH_REDIRECT_URL}
      - GATEWAY_SECRET=${GATEWAY_SECRET}
      - FRONTEND_DOMAIN=${FRONTEND_DOMAIN}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=${NODE_ENV}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_LOGSTASH=${ENABLE_LOGSTASH:-false}
      - LOGSTASH_HOST=${LOGSTASH_HOST:-logstash}
      - LOGSTASH_PORT=${LOGSTASH_PORT:-5044}
    depends_on:
      auth:
        condition: service_started
  widget-registry:
    build:
      context: ./backend/widget-registry
      dockerfile: Dockerfile
    container_name: widget-registry
    ports:
      - "3001:3001"
    networks:
      - elk
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3001
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@widget-registry-db:5432/${POSTGRES_DB_WIDGET_REGISTRY}?schema=public
    restart: always
    depends_on:
      widget-registry-db:
        condition: service_started
    develop:
      watch:
        - action: sync
          path: ./backend/widget-registry
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./backend/widget-registry/package.json
  widget-registry-db:
    image: postgres:latest
    container_name: widget-registry-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_WIDGET_REGISTRY}
    networks:
      - elk
    ports:
      - "5433:5432"
    volumes:
      - widget_registry_db_data:/var/lib/postgresql/data

networks:
  elk:
    driver: bridge

volumes:
  auth_db_data:
    driver: local
  widget_registry_db_data:
    driver: local
  esdata:
    driver: local
