// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tasks.Data;

#nullable disable

namespace tasks.Migrations
{
    [DbContext(typeof(TasksDbContext))]
    [Migration("20250628153531_AddHierarchicalTasks")]
    partial class AddHierarchicalTasks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-preview.5.25277.114")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tasks.Models.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<bool>("Completed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("completed");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("display_order");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_task_id");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("priority");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("WidgetId")
                        .HasColumnType("text")
                        .HasColumnName("widget_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId")
                        .HasDatabaseName("idx_tasks_parent_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_tasks_user_id");

                    b.HasIndex("WidgetId")
                        .HasDatabaseName("idx_tasks_widget_id");

                    b.HasIndex("ParentTaskId", "DisplayOrder")
                        .HasDatabaseName("idx_tasks_parent_order");

                    b.HasIndex("UserId", "Category")
                        .HasDatabaseName("idx_tasks_user_category");

                    b.HasIndex("UserId", "Completed")
                        .HasDatabaseName("idx_tasks_user_completed");

                    b.HasIndex("WidgetId", "ParentTaskId", "DisplayOrder")
                        .HasDatabaseName("idx_tasks_widget_hierarchy");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("Tasks.Models.TaskEntity", b =>
                {
                    b.HasOne("Tasks.Models.TaskEntity", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ParentTask");
                });

            modelBuilder.Entity("Tasks.Models.TaskEntity", b =>
                {
                    b.Navigation("SubTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
