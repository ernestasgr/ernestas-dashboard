name: CI

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    frontend-unit-tests:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: frontend
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: lts/*
            - name: Install dependencies
              run: npm install -g pnpm && pnpm install
            - name: Run frontend unit tests
              run: pnpm test

    auth-unit-tests:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: backend/auth
        steps:
            - uses: actions/checkout@v4
            - name: Set up JDK 24
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "24"
            - name: Make mvnw executable
              run: chmod +x mvnw
            - name: Run auth unit tests
              run: ./mvnw test

    gateway-unit-tests:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: gateway
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: lts/*
            - name: Install dependencies
              run: npm install -g pnpm && pnpm install
            - name: Run gateway unit tests
              run: pnpm test

    e2e-tests:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: e2e
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: lts/*
            - name: Start Docker services
              run: docker compose -f ../docker-compose.yml up -d
              env:
                  NODE_ENV: ${{ secrets.NODE_ENV }}
                  WATCHPACK_POLLING: ${{ secrets.WATCHPACK_POLLING }}
                  FRONTEND_DOMAIN: ${{ secrets.FRONTEND_DOMAIN }}
                  SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
                  SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
                  SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
                  JWT_SECRET: ${{ secrets.JWT_SECRET }}
                  JWT_ACCESS_EXPIRATION: ${{ secrets.JWT_ACCESS_EXPIRATION }}
                  JWT_REFRESH_EXPIRATION: ${{ secrets.JWT_REFRESH_EXPIRATION }}
                  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
                  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
                  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
                  AUTH_URL: ${{ secrets.AUTH_URL }}
                  AUTH_REDIRECT_URL: ${{ secrets.AUTH_REDIRECT_URL }}
                  GATEWAY_SECRET: ${{ secrets.GATEWAY_SECRET }}
                  GATEWAY_DOMAIN: ${{ secrets.GATEWAY_DOMAIN }}
                  PROFILE: ${{ secrets.PROFILE }}
            - name: Wait for gateway to be healthy
              run: ../.github/scripts/wait-for-gateway.sh "${{ secrets.GATEWAY_DOMAIN }}"
            - name: Install dependencies
              run: npm install -g pnpm && pnpm install
            - name: Install Playwright Browsers
              run: pnpm exec playwright install --with-deps
            - name: Run Playwright tests
              run: pnpm exec playwright test
            - name: Stop Docker services
              if: always()
              run: docker compose -f ../docker-compose.yml down
            - name: Print logs on failure
              if: failure()
              run: docker compose -f ../docker-compose.yml logs
